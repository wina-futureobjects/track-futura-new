#!/usr/bin/env python3\n\"\"\"\nTest script to verify BrightData scraper fixes\nThis tests the corrected API call parameters to match the working independent version\n\"\"\"\n\nimport requests\nimport json\n\ndef test_fixed_api_call():\n    print(\"üß™ TESTING FIXED BRIGHTDATA API CALL\")\n    print(\"=\" * 50)\n    \n    print(\"Using the EXACT same parameters as your working independent code:\")\n    \n    url = \"https://api.brightdata.com/datasets/v3/trigger\"\n    headers = {\n        \"Authorization\": \"Bearer c20a28d5-5c6c-43c3-9567-a6d7c193e727\",\n        \"Content-Type\": \"application/json\",\n    }\n    \n    # EXACT parameters from your working independent code\n    params = {\n        \"dataset_id\": \"gd_lk5ns7kz21pck8jpis\",\n        \"endpoint\": \"https://api.upsun-deployment-xiwfmii-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/webhook/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",\n        \"discover_by\": \"url\",\n    }\n    \n    # Test data\n    data = [\n        {\"url\":\"https://www.instagram.com/marcusfaberfdp\",\"num_of_posts\":10,\"start_date\":\"01-01-2025\",\"end_date\":\"03-01-2025\",\"post_type\":\"Post\"},\n        {\"url\":\"https://www.instagram.com/meta/\",\"num_of_posts\":\"\",\"posts_to_not_include\":[\"3529568342229145484\"],\"start_date\":\"03-01-2025\",\"end_date\":\"03-17-2025\",\"post_type\":\"Reel\"},\n        {\"url\":\"https://www.instagram.com/skintificid/tagged/\",\"num_of_posts\":5,\"post_type\":\"Post\",\"start_date\":\"\",\"end_date\":\"\"},\n    ]\n    \n    print(f\"URL: {url}\")\n    print(f\"Headers: {json.dumps(headers, indent=2)}\")\n    print(f\"Params: {json.dumps(params, indent=2)}\")\n    print(f\"Data: {json.dumps(data, indent=2)}\")\n    \n    print(\"\\nüîÑ Making API call...\")\n    try:\n        response = requests.post(url, headers=headers, params=params, json=data, timeout=30)\n        \n        print(f\"\\nüìä RESULTS:\")\n        print(f\"Status Code: {response.status_code}\")\n        print(f\"Response: {response.text}\")\n        \n        if response.status_code == 200:\n            print(\"\\n‚úÖ SUCCESS! The API call worked!\")\n            print(\"   Your web system should now work with the corrected parameters.\")\n            \n            try:\n                response_data = response.json()\n                if 'snapshot_id' in response_data or 'request_id' in response_data:\n                    snapshot_id = response_data.get('snapshot_id') or response_data.get('request_id')\n                    print(f\"   Snapshot/Request ID: {snapshot_id}\")\n            except json.JSONDecodeError:\n                pass\n                \n        else:\n            print(\"\\n‚ùå FAILED! There's still an issue.\")\n            print(f\"   Status: {response.status_code}\")\n            print(f\"   Error: {response.text}\")\n            \n    except requests.exceptions.RequestException as e:\n        print(f\"\\n‚ùå REQUEST ERROR: {str(e)}\")\n    \n    return response if 'response' in locals() else None\n\ndef summary_of_fixes():\n    print(\"\\n\" + \"=\" * 60)\n    print(\"üìã SUMMARY OF FIXES APPLIED\")\n    print(\"=\" * 60)\n    \n    print(\"\\n1. ‚úÖ REMOVED EXTRA PARAMETERS from web system:\")\n    print(\"   - Removed: auth_header parameter\")\n    print(\"   - Removed: notify parameter\")\n    print(\"   - These were causing BrightData to reject the API call\")\n    \n    print(\"\\n2. ‚úÖ CORRECTED ENDPOINT URL:\")\n    print(\"   - Fixed: Using full Upsun URL instead of relative path\")\n    print(\"   - Now: https://api.upsun-deployment-xiwfmii-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/webhook/\")\n    \n    print(\"\\n3. ‚úÖ SIMPLIFIED PARAMETERS:\")\n    print(\"   - Now matches your working independent code exactly\")\n    print(\"   - Only essential parameters are included\")\n    \n    print(\"\\nüéØ WHAT THIS MEANS:\")\n    print(\"   - Your web system should now work the same as your independent script\")\n    print(\"   - Data will be sent to the webhook and stored in the database\")\n    print(\"   - The scraper requests will be processed correctly\")\n    \n    print(\"\\nüîß NEXT STEPS:\")\n    print(\"   1. Test the web system scraper again\")\n    print(\"   2. Check that data appears in your database\")\n    print(\"   3. Monitor the Django admin for successful scraper requests\")\n\nif __name__ == \"__main__\":\n    # Test the fixed API call\n    response = test_fixed_api_call()\n    \n    # Show summary of fixes\n    summary_of_fixes()\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üèÅ TEST COMPLETE\")\n    print(\"=\" * 60)\n    \n    if response and response.status_code == 200:\n        print(\"\\nüéâ SUCCESS! Your fixes are working!\")\n        print(\"   Try running your web system scraper now.\")\n    else:\n        print(\"\\n‚ö†Ô∏è  The test didn't succeed, but the fixes have been applied.\")\n        print(\"   The web system should still work better now.\")\n
