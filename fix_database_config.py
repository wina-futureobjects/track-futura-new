#!/usr/bin/env python3\n\"\"\"\nFix database configuration to match working manualrun.py script\n\"\"\"\n\nimport os\nimport sys\n\n# Add Django project to path\nbackend_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend')\nsys.path.insert(0, backend_dir)\n\n# Set up Django environment\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\nimport django\ndjango.setup()\n\nfrom brightdata_integration.models import BrightdataConfig\n\ndef fix_database_config():\n    print(\"üîß FIXING DATABASE CONFIGURATION\")\n    print(\"=\" * 50)\n    \n    # Values from your working manualrun.py script\n    WORKING_API_TOKEN = \"c20a28d5-5c6c-43c3-9567-a6d7c193e727\"\n    WORKING_DATASET_ID = \"gd_lk5ns7kz21pck8jpis\"\n    \n    print(f\"Target API Token: {WORKING_API_TOKEN}\")\n    print(f\"Target Dataset ID: {WORKING_DATASET_ID}\")\n    \n    # Check current Instagram posts configuration\n    print(\"\\n1. CHECKING CURRENT CONFIGURATION:\")\n    print(\"-\" * 40)\n    \n    config = BrightdataConfig.objects.filter(platform='instagram_posts', is_active=True).first()\n    \n    if not config:\n        print(\"‚ùå No active Instagram posts configuration found!\")\n        print(\"   Creating new configuration...\")\n        \n        config = BrightdataConfig.objects.create(\n            name=\"Instagram Posts - Working Config\",\n            platform=\"instagram_posts\",\n            dataset_id=WORKING_DATASET_ID,\n            api_token=WORKING_API_TOKEN,\n            is_active=True,\n            description=\"Configuration matching working manualrun.py script\"\n        )\n        print(f\"‚úÖ Created new configuration: {config.name}\")\n        return config\n    \n    print(f\"Found configuration: {config.name}\")\n    print(f\"Current Dataset ID: {config.dataset_id}\")\n    print(f\"Current API Token: {config.api_token[:20]}...{config.api_token[-4:]}\")\n    \n    # Check if values need updating\n    needs_update = False\n    changes = []\n    \n    if config.dataset_id != WORKING_DATASET_ID:\n        print(f\"‚ùå Dataset ID mismatch!\")\n        print(f\"   Current: {config.dataset_id}\")\n        print(f\"   Should be: {WORKING_DATASET_ID}\")\n        config.dataset_id = WORKING_DATASET_ID\n        needs_update = True\n        changes.append(\"dataset_id\")\n    else:\n        print(\"‚úÖ Dataset ID matches\")\n    \n    if config.api_token != WORKING_API_TOKEN:\n        print(f\"‚ùå API Token mismatch!\")\n        print(f\"   Current: {config.api_token[:20]}...{config.api_token[-4:]}\")\n        print(f\"   Should be: {WORKING_API_TOKEN[:20]}...{WORKING_API_TOKEN[-4:]}\")\n        config.api_token = WORKING_API_TOKEN\n        needs_update = True\n        changes.append(\"api_token\")\n    else:\n        print(\"‚úÖ API Token matches\")\n    \n    if needs_update:\n        config.save()\n        print(f\"\\n‚úÖ Updated configuration! Changed: {', '.join(changes)}\")\n    else:\n        print(\"\\n‚úÖ Configuration already matches working script!\")\n    \n    return config\n\ndef verify_configuration():\n    print(\"\\n2. VERIFYING FINAL CONFIGURATION:\")\n    print(\"-\" * 40)\n    \n    config = BrightdataConfig.objects.filter(platform='instagram_posts', is_active=True).first()\n    \n    if not config:\n        print(\"‚ùå No configuration found after fix!\")\n        return False\n    \n    WORKING_API_TOKEN = \"c20a28d5-5c6c-43c3-9567-a6d7c193e727\"\n    WORKING_DATASET_ID = \"gd_lk5ns7kz21pck8jpis\"\n    \n    print(f\"Configuration: {config.name}\")\n    print(f\"Platform: {config.platform}\")\n    print(f\"Dataset ID: {config.dataset_id}\")\n    print(f\"API Token: {config.api_token[:20]}...{config.api_token[-4:]}\")\n    print(f\"Is Active: {config.is_active}\")\n    \n    # Verify values\n    if config.dataset_id == WORKING_DATASET_ID and config.api_token == WORKING_API_TOKEN:\n        print(\"\\n‚úÖ PERFECT! Configuration now matches working script exactly!\")\n        return True\n    else:\n        print(\"\\n‚ùå Configuration still doesn't match!\")\n        return False\n\ndef show_api_comparison():\n    print(\"\\n3. API CALL COMPARISON:\")\n    print(\"-\" * 30)\n    \n    config = BrightdataConfig.objects.filter(platform='instagram_posts', is_active=True).first()\n    \n    print(\"Your working manualrun.py:\")\n    print(\"  Authorization: Bearer c20a28d5-5c6c-43c3-9567-a6d7c193e727\")\n    print(\"  dataset_id: gd_lk5ns7kz21pck8jpis\")\n    \n    print(\"\\nWeb system will now use:\")\n    if config:\n        print(f\"  Authorization: Bearer {config.api_token}\")\n        print(f\"  dataset_id: {config.dataset_id}\")\n        \n        if (config.api_token == \"c20a28d5-5c6c-43c3-9567-a6d7c193e727\" and \n            config.dataset_id == \"gd_lk5ns7kz21pck8jpis\"):\n            print(\"\\nüéâ IDENTICAL! Web system will make the same API calls as your working script!\")\n        else:\n            print(\"\\n‚ö†Ô∏è  Still different - there may be an issue\")\n    else:\n        print(\"  ‚ùå No configuration found\")\n\nif __name__ == \"__main__\":\n    print(\"üîç FIXING BRIGHTDATA DATABASE CONFIGURATION\")\n    print(\"=\" * 60)\n    \n    # Fix the configuration\n    config = fix_database_config()\n    \n    # Verify it worked\n    success = verify_configuration()\n    \n    # Show comparison\n    show_api_comparison()\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üèÅ CONFIGURATION FIX COMPLETE\")\n    print(\"=\" * 60)\n    \n    if success:\n        print(\"\\nüéâ SUCCESS! Your web system should now work exactly like manualrun.py!\")\n        print(\"\\nüß™ Next steps:\")\n        print(\"1. Test your web system scraper\")\n        print(\"2. Check that data appears in the database\")\n        print(\"3. Compare the API calls in the logs\")\n    else:\n        print(\"\\n‚ùå There was an issue with the configuration fix.\")\n        print(\"   Please check the database manually.\")\n
