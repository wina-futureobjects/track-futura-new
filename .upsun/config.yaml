applications:
  backend:
    source:
      root: "backend"
    type: "python:3.11"

    web:
      commands:
        start: "waitress-serve --unix-socket=$SOCKET config.wsgi:application"
      upstream:
        socket_family: unix
      locations:
        "/":
          passthru: true
        "/static":
          allow: true
          expires: "1h"
          root: "staticfiles"
    build:
      flavor: none
    hooks:
      build: |
        set -eux
        # Upgrade pip first
        pip install --upgrade pip setuptools wheel
        # Install requirements with verbose output
        pip install -r requirements.txt --verbose
        # Verify whitenoise is installed
        python -c "import whitenoise; print('whitenoise installed successfully')"
      deploy: |
        set -eux
        # Collect static files
        python manage.py collectstatic --noinput --verbosity=2
        # Run migrations
        python manage.py migrate --verbosity=2
    relationships:
      database: "db:postgresql"
    variables:
      env:
        DJANGO_SETTINGS_MODULE: "config.settings"
        DEBUG: "False"
        DJANGO_SECURE_SSL_REDIRECT: "True"
        DD_TRACE_ENABLED: "false"
        DD_PROFILING_ENABLED: "false"
        DD_APM_ENABLED: "false"
        DD_LOGS_ENABLED: "false"
        DD_TRACE_STARTUP_LOGS: "false"
        _DD_TRACE_ENABLED: "false"
        DD_SERVICE: ""
        DD_ENV: ""
        DD_VERSION: ""
    mounts:
      "/staticfiles":
        source: "local"
        source_path: "static_assets"

  frontend:
    source:
      root: "frontend"
    type: "nodejs:18"
    web:
      commands:
        start: "npm run start"
      upstream:
        socket_family: tcp
      locations:
        "/":
          root: "dist"
          index:
            - "index.html"
          expires: -1
          scripts: false
          allow: true
        "/assets":
          root: "dist/assets"
          expires: 365d
          scripts: false
          allow: true
    build:
      flavor: none
    hooks:
      build: |
        npm install
        npm run build

# Define database service
services:
  db:
    type: postgresql:15
    configuration:
      extensions:
        - pg_trgm
        - unaccent

routes:
  "https://api.{default}/":
    type: upstream
    upstream: "backend:http"

  "https://{default}/":
    type: upstream
    upstream: "frontend:http"
    cache:
      enabled: true
      default_ttl: 0
      cookies: ['*']
