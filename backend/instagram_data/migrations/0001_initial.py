# Generated by Django 5.2 on 2025-09-29 06:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InstagramComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_id', models.CharField(max_length=255)),
                ('post_id', models.CharField(max_length=255)),
                ('post_url', models.URLField(max_length=500)),
                ('post_user', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField()),
                ('comment_date', models.DateTimeField(blank=True, null=True)),
                ('comment_user', models.CharField(max_length=255)),
                ('comment_user_url', models.URLField(blank=True, max_length=500, null=True)),
                ('likes_number', models.IntegerField(default=0)),
                ('replies_number', models.IntegerField(default=0)),
                ('replies', models.JSONField(blank=True, null=True)),
                ('hashtag_comment', models.TextField(blank=True, null=True)),
                ('tagged_users_in_comment', models.JSONField(blank=True, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Instagram Comment',
                'verbose_name_plural': 'Instagram Comments',
                'ordering': ['-comment_date'],
            },
        ),
        migrations.CreateModel(
            name='InstagramPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('user_posted', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('hashtags', models.JSONField(blank=True, null=True)),
                ('num_comments', models.IntegerField(default=0)),
                ('date_posted', models.DateTimeField(blank=True, null=True)),
                ('likes', models.IntegerField(default=0)),
                ('post_id', models.CharField(max_length=100)),
                ('photos', models.JSONField(blank=True, null=True)),
                ('videos', models.JSONField(blank=True, null=True)),
                ('thumbnail', models.URLField(blank=True, max_length=500, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('video_play_count', models.IntegerField(blank=True, null=True)),
                ('video_view_count', models.IntegerField(blank=True, null=True)),
                ('length', models.CharField(blank=True, max_length=20, null=True)),
                ('video_url', models.URLField(blank=True, max_length=1000, null=True)),
                ('audio_url', models.URLField(blank=True, max_length=1000, null=True)),
                ('shortcode', models.CharField(blank=True, max_length=255, null=True)),
                ('content_id', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram_pk', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('platform_type', models.CharField(blank=True, max_length=50, null=True)),
                ('product_type', models.CharField(blank=True, max_length=50, null=True)),
                ('user_posted_id', models.CharField(blank=True, max_length=255, null=True)),
                ('followers', models.IntegerField(blank=True, null=True)),
                ('posts_count', models.IntegerField(blank=True, null=True)),
                ('following', models.IntegerField(blank=True, null=True)),
                ('profile_image_link', models.URLField(blank=True, max_length=500, null=True)),
                ('user_profile_url', models.URLField(blank=True, max_length=500, null=True)),
                ('profile_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_paid_partnership', models.BooleanField(default=False)),
                ('partnership_details', models.JSONField(blank=True, null=True)),
                ('coauthor_producers', models.JSONField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('latest_comments', models.JSONField(blank=True, null=True)),
                ('top_comments', models.JSONField(blank=True, null=True)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('engagement_score_view', models.IntegerField(blank=True, null=True)),
                ('tagged_users', models.JSONField(blank=True, null=True)),
                ('audio', models.JSONField(blank=True, null=True)),
                ('post_content', models.JSONField(blank=True, null=True)),
                ('videos_duration', models.JSONField(blank=True, null=True)),
                ('images', models.JSONField(blank=True, null=True)),
                ('photos_number', models.IntegerField(blank=True, null=True)),
                ('alt_text', models.TextField(blank=True, null=True)),
                ('discovery_input', models.CharField(blank=True, max_length=255, null=True)),
                ('has_handshake', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Instagram Post',
                'verbose_name_plural': 'Instagram Posts',
                'ordering': ['-date_posted'],
            },
        ),
        migrations.CreateModel(
            name='CommentScrapingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this comment scraping job', max_length=255)),
                ('selected_folders', models.JSONField(help_text='List of folder IDs to scrape comments from')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_posts', models.IntegerField(default=0, help_text='Total number of posts to process')),
                ('processed_posts', models.IntegerField(default=0, help_text='Number of posts processed')),
                ('successful_requests', models.IntegerField(default=0, help_text='Number of successful API requests')),
                ('failed_requests', models.IntegerField(default=0, help_text='Number of failed API requests')),
                ('total_comments_scraped', models.IntegerField(default=0, help_text='Total comments scraped')),
                ('brightdata_job_id', models.CharField(blank=True, help_text='BrightData job ID', max_length=255, null=True)),
                ('brightdata_response', models.JSONField(blank=True, help_text='Full response from BrightData API', null=True)),
                ('error_log', models.TextField(blank=True, help_text='Error messages and logs', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instagram_comment_scraping_jobs', to='users.project')),
            ],
            options={
                'verbose_name': 'Instagram Comment Scraping Job',
                'verbose_name_plural': 'Instagram Comment Scraping Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(choices=[('posts', 'Posts'), ('reels', 'Reels'), ('comments', 'Comments')], default='posts', max_length=20)),
                ('folder_type', models.CharField(choices=[('run', 'Scraping Run'), ('service', 'Platform Service'), ('content', 'Content Folder')], default='content', help_text='Type of folder in the hierarchy', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_folder', models.ForeignKey(blank=True, help_text='Parent folder in the hierarchy', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='instagram_data.folder')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instagram_folders', to='users.project')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
