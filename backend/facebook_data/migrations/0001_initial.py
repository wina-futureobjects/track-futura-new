# Generated by Django 5.2 on 2025-09-29 06:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FacebookPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('post_id', models.CharField(max_length=100)),
                ('user_url', models.URLField(blank=True, max_length=500, null=True)),
                ('user_posted', models.CharField(blank=True, max_length=100, null=True)),
                ('user_username_raw', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('hashtags', models.TextField(blank=True, null=True)),
                ('date_posted', models.DateTimeField(blank=True, null=True)),
                ('num_comments', models.IntegerField(default=0)),
                ('num_shares', models.IntegerField(blank=True, null=True)),
                ('likes', models.IntegerField(default=0)),
                ('video_view_count', models.IntegerField(blank=True, null=True)),
                ('num_likes_type', models.JSONField(blank=True, null=True)),
                ('count_reactions_type', models.JSONField(blank=True, null=True)),
                ('page_name', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_id', models.CharField(blank=True, max_length=255, null=True)),
                ('page_intro', models.TextField(blank=True, null=True)),
                ('page_category', models.CharField(blank=True, max_length=255, null=True)),
                ('page_logo', models.URLField(blank=True, max_length=500, null=True)),
                ('page_external_website', models.URLField(blank=True, max_length=500, null=True)),
                ('page_likes', models.IntegerField(blank=True, null=True)),
                ('page_followers', models.IntegerField(blank=True, null=True)),
                ('page_is_verified', models.BooleanField(default=False)),
                ('followers', models.IntegerField(blank=True, null=True)),
                ('page_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('page_email', models.EmailField(blank=True, max_length=255, null=True)),
                ('page_creation_time', models.DateTimeField(blank=True, null=True)),
                ('page_reviews_score', models.CharField(blank=True, max_length=20, null=True)),
                ('page_reviewers_amount', models.IntegerField(blank=True, null=True)),
                ('page_price_range', models.CharField(blank=True, max_length=50, null=True)),
                ('photos', models.TextField(blank=True, null=True)),
                ('videos', models.TextField(blank=True, null=True)),
                ('attachments_data', models.JSONField(blank=True, null=True)),
                ('thumbnail', models.URLField(blank=True, max_length=500, null=True)),
                ('external_link', models.URLField(blank=True, max_length=500, null=True)),
                ('post_image', models.URLField(blank=True, max_length=500, null=True)),
                ('post_external_link', models.URLField(blank=True, max_length=500, null=True)),
                ('post_external_title', models.CharField(blank=True, max_length=500, null=True)),
                ('post_external_image', models.URLField(blank=True, max_length=500, null=True)),
                ('link_description_text', models.TextField(blank=True, null=True)),
                ('page_url', models.URLField(blank=True, max_length=500, null=True)),
                ('header_image', models.URLField(blank=True, max_length=500, null=True)),
                ('avatar_image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('profile_handle', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_image_link', models.URLField(blank=True, max_length=500, null=True)),
                ('shortcode', models.CharField(blank=True, max_length=255, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('audio', models.CharField(blank=True, max_length=100, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('has_handshake', models.BooleanField(blank=True, default=False, null=True)),
                ('is_sponsored', models.BooleanField(blank=True, default=False, null=True)),
                ('sponsor_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_paid_partnership', models.BooleanField(default=False)),
                ('is_page', models.BooleanField(blank=True, default=False, null=True)),
                ('include_profile_data', models.BooleanField(blank=True, default=False, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('latest_comments', models.TextField(blank=True, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('active_ads_urls', models.JSONField(blank=True, null=True)),
                ('delegate_page_id', models.CharField(blank=True, max_length=255, null=True)),
                ('original_post', models.JSONField(blank=True, null=True)),
                ('other_posts_url', models.URLField(blank=True, max_length=500, null=True)),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('platform_type', models.CharField(blank=True, max_length=50, null=True)),
                ('post_type', models.CharField(blank=True, max_length=50, null=True)),
                ('days_range', models.IntegerField(blank=True, null=True)),
                ('num_of_posts', models.IntegerField(blank=True, null=True)),
                ('posts_count', models.IntegerField(blank=True, null=True)),
                ('posts_to_not_include', models.TextField(blank=True, null=True)),
                ('until_date', models.DateField(blank=True, null=True)),
                ('from_date', models.DateField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('following', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('input', models.JSONField(blank=True, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=100, null=True)),
                ('warning', models.TextField(blank=True, null=True)),
                ('warning_code', models.CharField(blank=True, max_length=100, null=True)),
                ('tagged_users', models.TextField(blank=True, null=True)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('discovery_input', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Facebook Post',
                'verbose_name_plural': 'Facebook Posts',
                'ordering': ['-date_posted'],
            },
        ),
        migrations.CreateModel(
            name='CommentScrapingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this comment scraping job', max_length=255)),
                ('selected_folders', models.JSONField(help_text='List of folder IDs to scrape comments from')),
                ('comment_limit', models.IntegerField(default=10, help_text='Number of comments to scrape per post')),
                ('get_all_replies', models.BooleanField(default=False, help_text='Whether to get all replies to comments')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_posts', models.IntegerField(default=0, help_text='Total number of posts to process')),
                ('processed_posts', models.IntegerField(default=0, help_text='Number of posts processed')),
                ('successful_requests', models.IntegerField(default=0, help_text='Number of successful API requests')),
                ('failed_requests', models.IntegerField(default=0, help_text='Number of failed API requests')),
                ('total_comments_scraped', models.IntegerField(default=0, help_text='Total comments scraped')),
                ('brightdata_job_id', models.CharField(blank=True, help_text='BrightData job ID', max_length=255, null=True)),
                ('brightdata_response', models.JSONField(blank=True, help_text='Full response from BrightData API', null=True)),
                ('error_log', models.TextField(blank=True, help_text='Error messages and logs', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_scraping_jobs', to='users.project')),
            ],
            options={
                'verbose_name': 'Comment Scraping Job',
                'verbose_name_plural': 'Comment Scraping Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FacebookComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='URL of the Facebook post', max_length=500)),
                ('post_id', models.CharField(help_text='Facebook post ID', max_length=100)),
                ('post_url', models.URLField(help_text='Full URL of the Facebook post', max_length=500)),
                ('comment_id', models.CharField(help_text='Unique comment ID from Facebook', max_length=255, unique=True)),
                ('user_name', models.CharField(blank=True, help_text='Name of the commenter', max_length=255, null=True)),
                ('user_id', models.CharField(blank=True, help_text='Facebook user ID', max_length=255, null=True)),
                ('user_url', models.URLField(blank=True, help_text="URL to commenter's profile", max_length=500, null=True)),
                ('commentator_profile', models.URLField(blank=True, help_text='Commentator profile URL', max_length=500, null=True)),
                ('comment_text', models.TextField(blank=True, help_text='The actual comment text', null=True)),
                ('date_created', models.DateTimeField(blank=True, help_text='When the comment was created', null=True)),
                ('comment_link', models.URLField(blank=True, help_text='Direct link to the comment', max_length=500, null=True)),
                ('num_likes', models.IntegerField(default=0, help_text='Number of likes on the comment')),
                ('num_replies', models.IntegerField(default=0, help_text='Number of replies to the comment')),
                ('attached_files', models.JSONField(blank=True, help_text='Any files attached to the comment', null=True)),
                ('video_length', models.FloatField(blank=True, help_text='Length of video if attached', null=True)),
                ('source_type', models.CharField(blank=True, help_text='Source type from BrightData', max_length=100, null=True)),
                ('subtype', models.CharField(blank=True, help_text='Subtype from BrightData', max_length=100, null=True)),
                ('type', models.CharField(blank=True, help_text='Type from BrightData', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facebook_post', models.ForeignKey(blank=True, help_text='Link to the original Facebook post if it exists in our database', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='facebook_data.facebookpost')),
            ],
            options={
                'verbose_name': 'Facebook Comment',
                'verbose_name_plural': 'Facebook Comments',
                'ordering': ['-date_created', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(choices=[('posts', 'Posts'), ('reels', 'Reels'), ('comments', 'Comments')], default='posts', help_text='Type of content stored in this folder', max_length=20)),
                ('folder_type', models.CharField(choices=[('run', 'Scraping Run'), ('service', 'Platform Service'), ('content', 'Content Folder')], default='content', help_text='Type of folder in the hierarchy', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_folder', models.ForeignKey(blank=True, help_text='Parent folder in the hierarchy', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='facebook_data.folder')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='facebook_folders', to='users.project')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
