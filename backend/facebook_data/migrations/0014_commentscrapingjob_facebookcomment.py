# Generated by Django 5.2 on 2025-05-28 06:42

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('facebook_data', '0013_folder_project'),
        ('users', '0005_remove_organization_slug_remove_project_slug'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentScrapingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this comment scraping job', max_length=255)),
                ('selected_folders', models.JSONField(help_text='List of folder IDs to scrape comments from')),
                ('comment_limit', models.IntegerField(default=10, help_text='Number of comments to scrape per post')),
                ('get_all_replies', models.BooleanField(default=False, help_text='Whether to get all replies to comments')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_posts', models.IntegerField(default=0, help_text='Total number of posts to process')),
                ('processed_posts', models.IntegerField(default=0, help_text='Number of posts processed')),
                ('successful_requests', models.IntegerField(default=0, help_text='Number of successful API requests')),
                ('failed_requests', models.IntegerField(default=0, help_text='Number of failed API requests')),
                ('total_comments_scraped', models.IntegerField(default=0, help_text='Total comments scraped')),
                ('brightdata_job_id', models.CharField(blank=True, help_text='BrightData job ID', max_length=255, null=True)),
                ('brightdata_response', models.JSONField(blank=True, help_text='Full response from BrightData API', null=True)),
                ('error_log', models.TextField(blank=True, help_text='Error messages and logs', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_scraping_jobs', to='users.project')),
            ],
            options={
                'verbose_name': 'Comment Scraping Job',
                'verbose_name_plural': 'Comment Scraping Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FacebookComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='URL of the Facebook post', max_length=500)),
                ('post_id', models.CharField(help_text='Facebook post ID', max_length=100)),
                ('post_url', models.URLField(help_text='Full URL of the Facebook post', max_length=500)),
                ('comment_id', models.CharField(help_text='Unique comment ID from Facebook', max_length=255, unique=True)),
                ('user_name', models.CharField(blank=True, help_text='Name of the commenter', max_length=255, null=True)),
                ('user_id', models.CharField(blank=True, help_text='Facebook user ID', max_length=255, null=True)),
                ('user_url', models.URLField(blank=True, help_text="URL to commenter's profile", max_length=500, null=True)),
                ('commentator_profile', models.URLField(blank=True, help_text='Commentator profile URL', max_length=500, null=True)),
                ('comment_text', models.TextField(blank=True, help_text='The actual comment text', null=True)),
                ('date_created', models.DateTimeField(blank=True, help_text='When the comment was created', null=True)),
                ('comment_link', models.URLField(blank=True, help_text='Direct link to the comment', max_length=500, null=True)),
                ('num_likes', models.IntegerField(default=0, help_text='Number of likes on the comment')),
                ('num_replies', models.IntegerField(default=0, help_text='Number of replies to the comment')),
                ('attached_files', models.JSONField(blank=True, help_text='Any files attached to the comment', null=True)),
                ('video_length', models.FloatField(blank=True, help_text='Length of video if attached', null=True)),
                ('source_type', models.CharField(blank=True, help_text='Source type from BrightData', max_length=100, null=True)),
                ('subtype', models.CharField(blank=True, help_text='Subtype from BrightData', max_length=100, null=True)),
                ('type', models.CharField(blank=True, help_text='Type from BrightData', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facebook_post', models.ForeignKey(blank=True, help_text='Link to the original Facebook post if it exists in our database', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='facebook_data.facebookpost')),
            ],
            options={
                'verbose_name': 'Facebook Comment',
                'verbose_name_plural': 'Facebook Comments',
                'ordering': ['-date_created', '-created_at'],
                'indexes': [models.Index(fields=['post_id'], name='facebook_da_post_id_7982ea_idx'), models.Index(fields=['user_id'], name='facebook_da_user_id_f2ff91_idx'), models.Index(fields=['date_created'], name='facebook_da_date_cr_34d884_idx'), models.Index(fields=['comment_id'], name='facebook_da_comment_f9357f_idx')],
            },
        ),
    ]
