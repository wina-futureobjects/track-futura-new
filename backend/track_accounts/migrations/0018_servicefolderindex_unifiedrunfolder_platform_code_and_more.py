# Generated by Django 5.2 on 2025-08-08 03:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('track_accounts', '0017_alter_unifiedrunfolder_folder_type'),
        ('users', '0006_service_platform_platformservice'),
        ('workflow', '0007_scheduledscrapingtask_end_date_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceFolderIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_code', models.CharField(choices=[('facebook', 'Facebook'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('tiktok', 'TikTok')], max_length=20)),
                ('service_code', models.CharField(choices=[('posts', 'Posts'), ('reels', 'Reels'), ('comments', 'Comments'), ('profiles', 'Profiles')], max_length=20)),
            ],
        ),
        migrations.AddField(
            model_name='unifiedrunfolder',
            name='platform_code',
            field=models.CharField(blank=True, choices=[('facebook', 'Facebook'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('tiktok', 'TikTok')], max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='unifiedrunfolder',
            name='service_code',
            field=models.CharField(blank=True, choices=[('posts', 'Posts'), ('reels', 'Reels'), ('comments', 'Comments'), ('profiles', 'Profiles')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='unifiedrunfolder',
            name='folder_type',
            field=models.CharField(choices=[('run', 'Run'), ('platform', 'Platform'), ('service', 'Service'), ('job', 'Job'), ('content', 'Content')], default='content', max_length=20),
        ),
        migrations.AddIndex(
            model_name='unifiedrunfolder',
            index=models.Index(fields=['scraping_run', 'folder_type'], name='track_accou_scrapin_49d942_idx'),
        ),
        migrations.AddIndex(
            model_name='unifiedrunfolder',
            index=models.Index(fields=['scraping_run', 'folder_type', 'platform_code', 'service_code'], name='track_accou_scrapin_8c2da3_idx'),
        ),
        # Backfill platform_code and service_code for existing 'service' folders before adding constraints
        migrations.RunPython(code=lambda apps, schema_editor: backfill_service_identity(apps), reverse_code=migrations.RunPython.noop),
        migrations.AddConstraint(
            model_name='unifiedrunfolder',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('folder_type', 'platform'), ('platform_code__isnull', False)), models.Q(('folder_type', 'platform'), _negated=True), _connector='OR'), name='ck_unified_platform_requires_platform_code'),
        ),
        migrations.AddConstraint(
            model_name='unifiedrunfolder',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('folder_type', 'service'), ('platform_code__isnull', False), ('service_code__isnull', False)), models.Q(('folder_type', 'service'), _negated=True), _connector='OR'), name='ck_unified_service_requires_platform_and_service_code'),
        ),
        migrations.AddField(
            model_name='servicefolderindex',
            name='folder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indexed_service_folder', to='track_accounts.unifiedrunfolder'),
        ),
        migrations.AddField(
            model_name='servicefolderindex',
            name='scraping_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_folder_indexes', to='workflow.scrapingrun'),
        ),
        migrations.AddIndex(
            model_name='servicefolderindex',
            index=models.Index(fields=['scraping_run', 'platform_code', 'service_code'], name='track_accou_scrapin_d41282_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicefolderindex',
            unique_together={('scraping_run', 'platform_code', 'service_code')},
        ),
    ]


def backfill_service_identity(apps):
    UnifiedRunFolder = apps.get_model('track_accounts', 'UnifiedRunFolder')
    # Best-effort parsing from existing folder names like "Instagram - Posts"
    platform_keywords = {
        'facebook': 'facebook',
        'instagram': 'instagram',
        'linkedin': 'linkedin',
        'tiktok': 'tiktok',
    }
    service_keywords = {
        'comments': 'comments',
        'reels': 'reels',
        'posts': 'posts',
        'post': 'posts',
        'profiles': 'profiles',
        'profile': 'profiles',
    }

    for folder in UnifiedRunFolder.objects.filter(folder_type='service').only('id', 'name', 'platform_code', 'service_code'):
        name = (folder.name or '').lower()
        platform_code = folder.platform_code
        service_code = folder.service_code

        if not platform_code:
            for key, code in platform_keywords.items():
                if key in name:
                    platform_code = code
                    break

        if not service_code:
            for key, code in service_keywords.items():
                if key in name:
                    service_code = code
                    break

        if platform_code or service_code:
            UnifiedRunFolder.objects.filter(id=folder.id).update(
                platform_code=platform_code,
                service_code=service_code,
            )
