# Generated by Django 5.2 on 2025-09-29 06:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Company name', max_length=200)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Company description', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Internal service name (e.g., 'posts', 'reels', 'comments')", max_length=50, unique=True)),
                ('display_name', models.CharField(help_text="User-friendly display name (e.g., 'Posts', 'Reels', 'Comments')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of the service', null=True)),
                ('icon_name', models.CharField(blank=True, help_text='Icon name for UI display', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('member', 'Member'), ('viewer', 'Viewer')], default='member', max_length=20)),
                ('display_name', models.CharField(blank=True, help_text='Display name for this user in this organization', max_length=255, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'organization')},
            },
        ),
        migrations.AddField(
            model_name='organization',
            name='members',
            field=models.ManyToManyField(related_name='organizations', through='users.OrganizationMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Internal platform name (e.g., 'instagram', 'facebook')", max_length=50, unique=True)),
                ('display_name', models.CharField(help_text="User-friendly display name (e.g., 'Instagram', 'Facebook')", max_length=100)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this platform is available for use')),
                ('description', models.TextField(blank=True, help_text='Description of the platform', null=True)),
                ('icon_name', models.CharField(blank=True, help_text='Icon name for UI display', max_length=50, null=True)),
                ('color', models.CharField(blank=True, help_text='Hex color code for UI display', max_length=7, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_platforms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Platform',
                'verbose_name_plural': 'Platforms',
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False, help_text='If true, all organization members can access')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('authorized_users', models.ManyToManyField(blank=True, related_name='accessible_projects', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='users.organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='users.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('super_admin', 'Super Admin'), ('tenant_admin', 'Tenant Admin'), ('user', 'User')], default='user', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='global_role', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlatformService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this platform-service combination is available')),
                ('description', models.TextField(blank=True, help_text='Description of this platform-service combination', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_platform_services', to=settings.AUTH_USER_MODEL)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platform_services', to='users.platform')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platform_services', to='users.service')),
            ],
            options={
                'verbose_name': 'Platform Service',
                'verbose_name_plural': 'Platform Services',
                'unique_together': {('platform', 'service')},
            },
        ),
        migrations.CreateModel(
            name='UnifiedUserRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Full name of the user', max_length=255)),
                ('email', models.EmailField(blank=True, help_text="User's email address", max_length=254)),
                ('role', models.CharField(choices=[('super_admin', 'Super Admin'), ('tenant_admin', 'Tenant Admin'), ('user', 'User')], default='user', help_text="User's role in the system", max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text="User's status", max_length=20)),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='When the user was created')),
                ('updated_date', models.DateTimeField(auto_now=True, help_text='When the user record was last updated')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unified_users', to='users.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='unified_record', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Unified User Record',
                'verbose_name_plural': 'Unified User Records',
                'ordering': ['-created_date'],
                'indexes': [models.Index(fields=['role'], name='users_unifi_role_efb96b_idx'), models.Index(fields=['status'], name='users_unifi_status_791e07_idx'), models.Index(fields=['company'], name='users_unifi_company_9ba007_idx'), models.Index(fields=['created_date'], name='users_unifi_created_54b348_idx')],
            },
        ),
    ]
