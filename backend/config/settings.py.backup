"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-k14j23-+4o*h)26ms8k#ghmv*kglz!hsf^h%sac1^sy7w6f2qw"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    
    # Local apps
    "users",
    "reports",
    "analytics",
    "data_collector",
    "query_builder",
    "instagram_data",
    "facebook_data",
    "track_accounts",
    "linkedin_data",
    "tiktok_data",
    "brightdata_integration",
    "chat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "users.middleware.CustomCsrfMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to SQLite for development
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only, set specific origins in production
CORS_ALLOW_CREDENTIALS = True

# CSRF settings - Auto-detect trusted origins for Upsun deployment
def get_csrf_trusted_origins():
    origins = ['http://localhost:5173', 'http://localhost:8000']  # Development origins
    
    # Auto-detect for Upsun/Platform.sh deployment
    if os.getenv('PLATFORM_APPLICATION_NAME'):
        # Get the routes from Platform.sh environment
        platform_routes = os.getenv('PLATFORM_ROUTES')
        if platform_routes:
            try:
                import json
                routes = json.loads(platform_routes)
                # Add all HTTPS routes as trusted origins
                for route_url in routes.keys():
                    if route_url.startswith('https://'):
                        clean_url = route_url.rstrip('/')
                        if clean_url not in origins:
                            origins.append(clean_url)
            except (json.JSONDecodeError, AttributeError):
                pass
        
        # Fallback: construct from app name and default Upsun domain
        app_name = os.getenv('PLATFORM_APPLICATION_NAME')
        project_id = os.getenv('PLATFORM_PROJECT')
        environment = os.getenv('PLATFORM_ENVIRONMENT', 'main')
        if app_name and project_id:
            fallback_url = f"https://{app_name}-{project_id}.{environment}.platformsh.site"
            if fallback_url not in origins:
                origins.append(fallback_url)
            
            # Also add the API subdomain
            api_url = f"https://api.{app_name}-{project_id}.{environment}.platformsh.site"
            if api_url not in origins:
                origins.append(api_url)
    
    return origins

CSRF_TRUSTED_ORIGINS = get_csrf_trusted_origins()

# Additional CSRF settings for production
CSRF_COOKIE_SECURE = not DEBUG  # Use secure cookies in production
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token
CSRF_COOKIE_SAMESITE = 'Lax'  # Allow cross-site requests with CSRF token
CSRF_USE_SESSIONS = False  # Use cookies instead of sessions for CSRF tokens

# Session security settings
SESSION_COOKIE_SECURE = not DEBUG  # Use secure cookies in production
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
SESSION_COOKIE_SAMESITE = 'Lax'  # Allow cross-site requests with session cookies

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = os.getenv('DJANGO_SECURE_SSL_REDIRECT', 'False') == 'True'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# BrightData Integration Settings - Auto-detect domain for Upsun deployment
def get_brightdata_base_url():
    # Manual override via environment variable (highest priority)
    manual_url = os.getenv('BRIGHTDATA_BASE_URL')
    if manual_url:
        return manual_url
    
    # Auto-detect for Upsun/Platform.sh deployment
    if os.getenv('PLATFORM_APPLICATION_NAME'):
        # Get the default route from Platform.sh environment
        platform_routes = os.getenv('PLATFORM_ROUTES')
        if platform_routes:
            try:
                import json
                routes = json.loads(platform_routes)
                # Find the primary HTTPS route
                for route_url, route_config in routes.items():
                    if route_config.get('primary') and route_url.startswith('https://'):
                        return route_url.rstrip('/')
                # Fallback: use the first HTTPS route
                for route_url in routes.keys():
                    if route_url.startswith('https://'):
                        return route_url.rstrip('/')
            except (json.JSONDecodeError, AttributeError):
                pass
        
        # Fallback: construct from app name and default Upsun domain
        app_name = os.getenv('PLATFORM_APPLICATION_NAME')
        project_id = os.getenv('PLATFORM_PROJECT')
        environment = os.getenv('PLATFORM_ENVIRONMENT', 'main')
        if app_name and project_id:
            return f"https://{app_name}-{project_id}.{environment}.platformsh.site"
    
    # Development fallback
    return 'http://localhost:8000'

BRIGHTDATA_BASE_URL = get_brightdata_base_url()
BRIGHTDATA_WEBHOOK_TOKEN = os.getenv('BRIGHTDATA_WEBHOOK_TOKEN', 'your-default-webhook-secret-token-change-this')

# Production/Upsun settings.
if (os.getenv('PLATFORM_APPLICATION_NAME') is not None):
    DEBUG = False

    # Static files for production - match Upsun mount path
    STATIC_ROOT = '/app/staticfiles'

    # Secret Key.
    if (os.getenv('PLATFORM_PROJECT_ENTROPY') is not None):
        SECRET_KEY = os.getenv('PLATFORM_PROJECT_ENTROPY')

    # Set allowed hosts from environment variable or auto-detect from routes
    if os.getenv('DJANGO_ALLOWED_HOSTS'):
        ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS').split(',')
    else:
        # Auto-detect allowed hosts from Platform.sh routes
        allowed_hosts = ['*']  # Fallback to allow all
        platform_routes = os.getenv('PLATFORM_ROUTES')
        if platform_routes:
            try:
                import json
                routes = json.loads(platform_routes)
                allowed_hosts = []
                for route_url in routes.keys():
                    if route_url.startswith('https://'):
                        # Extract hostname from URL
                        from urllib.parse import urlparse
                        hostname = urlparse(route_url).hostname
                        if hostname and hostname not in allowed_hosts:
                            allowed_hosts.append(hostname)
                if not allowed_hosts:  # If no hosts found, allow all
                    allowed_hosts = ['*']
            except (json.JSONDecodeError, AttributeError, ImportError):
                allowed_hosts = ['*']
        ALLOWED_HOSTS = allowed_hosts
    
    # Production database configuration.
    if (os.getenv('PLATFORM_ENVIRONMENT') is not None):
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('DATABASE_PATH'),
                'USER': os.getenv('DATABASE_USERNAME'),
                'PASSWORD': os.getenv('DATABASE_PASSWORD'),
                'HOST': os.getenv('DATABASE_HOST'),
                'PORT': os.getenv('DATABASE_PORT'),
            },
            'sqlite': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            }
        }
