# Generated by Django 5.2 on 2025-10-07 09:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BrightDataWebhookEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.CharField(max_length=255, unique=True)),
                ('snapshot_id', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('platform', models.CharField(blank=True, max_length=50)),
                ('raw_data', models.JSONField(default=dict)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'BrightData Webhook Event',
                'verbose_name_plural': 'BrightData Webhook Events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BrightDataBatchJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('source_folder_ids', models.JSONField(default=list, help_text='Source folder IDs for data storage')),
                ('platforms_to_scrape', models.JSONField(default=list, help_text='List of platforms to scrape')),
                ('content_types_to_scrape', models.JSONField(default=dict, help_text='Content types per platform')),
                ('platform_params', models.JSONField(default=dict, help_text='Platform-specific parameters')),
                ('num_of_posts', models.IntegerField(default=10, help_text='Number of posts to scrape per source')),
                ('start_date', models.DateField(blank=True, help_text='Start date for data collection', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date for data collection', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('error_log', models.TextField(blank=True, null=True)),
                ('progress', models.IntegerField(default=0, help_text='Progress percentage (0-100)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brightdata_batch_jobs', to='users.project')),
            ],
            options={
                'verbose_name': 'BrightData Batch Job',
                'verbose_name_plural': 'BrightData Batch Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BrightDataConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('tiktok', 'TikTok')], max_length=50)),
                ('dataset_id', models.CharField(help_text='BrightData dataset ID', max_length=100)),
                ('api_token', models.CharField(help_text='BrightData API token', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BrightData Configuration',
                'verbose_name_plural': 'BrightData Configurations',
                'unique_together': {('platform', 'dataset_id')},
            },
        ),
        migrations.CreateModel(
            name='BrightDataScraperRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(max_length=50)),
                ('content_type', models.CharField(max_length=50)),
                ('target_url', models.URLField()),
                ('source_name', models.CharField(max_length=200)),
                ('request_id', models.CharField(blank=True, help_text='BrightData request ID', max_length=255, null=True)),
                ('snapshot_id', models.CharField(blank=True, help_text='BrightData snapshot ID', max_length=255, null=True)),
                ('dataset_id', models.CharField(blank=True, help_text='BrightData dataset ID', max_length=255, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('batch_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraper_requests', to='brightdata_integration.brightdatabatchjob')),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraper_requests', to='brightdata_integration.brightdataconfig')),
            ],
            options={
                'verbose_name': 'BrightData Scraper Request',
                'verbose_name_plural': 'BrightData Scraper Requests',
                'ordering': ['-created_at'],
            },
        ),
    ]
