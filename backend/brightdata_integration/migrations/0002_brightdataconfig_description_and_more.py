# Generated by Django 5.1.6 on 2025-05-23 06:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("brightdata_integration", "0001_initial"),
        ("users", "0005_remove_organization_slug_remove_project_slug"),
    ]

    operations = [
        migrations.AddField(
            model_name="brightdataconfig",
            name="description",
            field=models.TextField(
                blank=True, help_text="Description of this configuration", null=True
            ),
        ),
        migrations.AddField(
            model_name="brightdataconfig",
            name="platform",
            field=models.CharField(
                choices=[
                    ("facebook", "Facebook"),
                    ("instagram", "Instagram"),
                    ("tiktok", "TikTok"),
                    ("linkedin", "LinkedIn"),
                ],
                default="facebook",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="scraperrequest",
            name="account_name",
            field=models.CharField(
                blank=True,
                help_text="Name of the tracked account",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="scraperrequest",
            name="iac_no",
            field=models.CharField(
                blank=True,
                help_text="IAC number of the tracked account",
                max_length=100,
                null=True,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="brightdataconfig",
            unique_together={("platform", "is_active")},
        ),
        migrations.CreateModel(
            name="BatchScraperJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name for this batch job", max_length=255
                    ),
                ),
                (
                    "source_folder_ids",
                    models.JSONField(
                        help_text="List of TrackAccountFolder IDs to scrape from"
                    ),
                ),
                (
                    "platforms_to_scrape",
                    models.JSONField(
                        default=list,
                        help_text="List of platforms to scrape: ['facebook', 'instagram', 'linkedin', 'tiktok']",
                    ),
                ),
                ("num_of_posts", models.IntegerField(default=10)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "auto_create_folders",
                    models.BooleanField(
                        default=True,
                        help_text="Auto-create folders for results by platform and date",
                    ),
                ),
                (
                    "output_folder_pattern",
                    models.CharField(
                        default="{platform}_{date}_{job_name}",
                        help_text="Pattern for auto-created folder names",
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_accounts", models.IntegerField(default=0)),
                ("processed_accounts", models.IntegerField(default=0)),
                ("successful_requests", models.IntegerField(default=0)),
                ("failed_requests", models.IntegerField(default=0)),
                (
                    "job_metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Stores detailed job execution information",
                        null=True,
                    ),
                ),
                ("error_log", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="batch_scraper_jobs",
                        to="users.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Batch Scraper Job",
                "verbose_name_plural": "Batch Scraper Jobs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="scraperrequest",
            name="batch_job",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="scraper_requests",
                to="brightdata_integration.batchscraperjob",
            ),
        ),
    ]
