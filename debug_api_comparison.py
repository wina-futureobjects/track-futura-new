#!/usr/bin/env python3\n\"\"\"\nDiagnostic script to compare working independent BrightData API call \nwith the web system's implementation\n\"\"\"\n\nimport requests\nimport json\nimport os\nimport sys\nfrom urllib.parse import urlencode\n\n# Add Django project to path\nbackend_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend')\nsys.path.insert(0, backend_dir)\n\n# Set up Django environment\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\nimport django\ndjango.setup()\n\nfrom django.conf import settings\nfrom brightdata_integration.models import BrightdataConfig\n\n# ==========================================\n# WORKING INDEPENDENT CODE (USER PROVIDED)\n# ==========================================\ndef working_independent_api_call():\n    print(\"üü¢ WORKING INDEPENDENT API CALL\")\n    print(\"=\" * 50)\n    \n    url = \"https://api.brightdata.com/datasets/v3/trigger\"\n    headers = {\n        \"Authorization\": \"Bearer c20a28d5-5c6c-43c3-9567-a6d7c193e727\",\n        \"Content-Type\": \"application/json\",\n    }\n    params = {\n        \"dataset_id\": \"gd_lk5ns7kz21pck8jpis\",\n        \"endpoint\": \"https://api.upsun-deployment-xiwfmii-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/webhook/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",\n        \"discover_by\": \"url\",\n    }\n    data = [\n        {\"url\":\"https://www.instagram.com/marcusfaberfdp\",\"num_of_posts\":10,\"start_date\":\"01-01-2025\",\"end_date\":\"03-01-2025\",\"post_type\":\"Post\"},\n        {\"url\":\"https://www.instagram.com/meta/\",\"num_of_posts\":\"\",\"posts_to_not_include\":[\"3529568342229145484\"],\"start_date\":\"03-01-2025\",\"end_date\":\"03-17-2025\",\"post_type\":\"Reel\"},\n        {\"url\":\"https://www.instagram.com/skintificid/tagged/\",\"num_of_posts\":5,\"post_type\":\"Post\",\"start_date\":\"\",\"end_date\":\"\"},\n    ]\n    \n    print(f\"URL: {url}\")\n    print(f\"Headers: {json.dumps(headers, indent=2)}\")\n    print(f\"Params: {json.dumps(params, indent=2)}\")\n    print(f\"Data: {json.dumps(data, indent=2)}\")\n    print(f\"Full URL: {url}?{urlencode(params)}\")\n    \n    print(\"\\nüîÑ Making API call...\")\n    response = requests.post(url, headers=headers, params=params, json=data)\n    print(f\"Response Status: {response.status_code}\")\n    print(f\"Response: {response.text}\")\n    return response\n\n# ==========================================\n# WEB SYSTEM IMPLEMENTATION (SIMULATED)\n# ==========================================\ndef web_system_api_call():\n    print(\"\\nüî¥ WEB SYSTEM API CALL (SIMULATED)\")\n    print(\"=\" * 50)\n    \n    # Get Instagram config from database\n    config = BrightdataConfig.objects.filter(platform='instagram_posts', is_active=True).first()\n    if not config:\n        print(\"‚ùå No active Instagram config found!\")\n        return None\n        \n    print(f\"Using config: {config.name} (Dataset ID: {config.dataset_id})\")\n    \n    # Import Django settings to get base URL and webhook token\n    base_url = getattr(settings, 'BRIGHTDATA_BASE_URL', 'http://localhost:8000')\n    webhook_token = getattr(settings, 'BRIGHTDATA_WEBHOOK_TOKEN', 'your-webhook-secret-token')\n    \n    print(f\"Base URL: {base_url}\")\n    print(f\"Webhook Token: {webhook_token}\")\n    \n    url = \"https://api.brightdata.com/datasets/v3/trigger\"\n    headers = {\n        \"Authorization\": f\"Bearer {config.api_token}\",\n        \"Content-Type\": \"application/json\",\n    }\n    \n    # Base parameters (like web system does)\n    params = {\n        \"dataset_id\": config.dataset_id,\n        \"endpoint\": f\"{base_url}/api/brightdata/webhook/\",\n        \"auth_header\": f\"Bearer {webhook_token}\",\n        \"notify\": f\"{base_url}/api/brightdata/notify/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",  # Instagram-specific\n        \"discover_by\": \"url\",     # Instagram-specific\n    }\n    \n    # Same data as working version\n    data = [\n        {\"url\":\"https://www.instagram.com/marcusfaberfdp\",\"num_of_posts\":10,\"start_date\":\"01-01-2025\",\"end_date\":\"03-01-2025\",\"post_type\":\"Post\"},\n        {\"url\":\"https://www.instagram.com/meta/\",\"num_of_posts\":\"\",\"posts_to_not_include\":[\"3529568342229145484\"],\"start_date\":\"03-01-2025\",\"end_date\":\"03-17-2025\",\"post_type\":\"Reel\"},\n        {\"url\":\"https://www.instagram.com/skintificid/tagged/\",\"num_of_posts\":5,\"post_type\":\"Post\",\"start_date\":\"\",\"end_date\":\"\"},\n    ]\n    \n    print(f\"URL: {url}\")\n    print(f\"Headers: {json.dumps(headers, indent=2)}\")\n    print(f\"Params: {json.dumps(params, indent=2)}\")\n    print(f\"Data: {json.dumps(data, indent=2)}\")\n    print(f\"Full URL: {url}?{urlencode(params)}\")\n    \n    print(\"\\nüîÑ Making API call...\")\n    response = requests.post(url, headers=headers, params=params, json=data)\n    print(f\"Response Status: {response.status_code}\")\n    print(f\"Response: {response.text}\")\n    return response\n\n# ==========================================\n# COMPARISON ANALYSIS\n# ==========================================\ndef compare_api_calls():\n    print(\"\\nüìä COMPARISON ANALYSIS\")\n    print(\"=\" * 50)\n    \n    # Get config for comparison\n    config = BrightdataConfig.objects.filter(platform='instagram_posts', is_active=True).first()\n    base_url = getattr(settings, 'BRIGHTDATA_BASE_URL', 'http://localhost:8000')\n    webhook_token = getattr(settings, 'BRIGHTDATA_WEBHOOK_TOKEN', 'your-webhook-secret-token')\n    \n    working_params = {\n        \"dataset_id\": \"gd_lk5ns7kz21pck8jpis\",\n        \"endpoint\": \"https://api.upsun-deployment-xiwfmii-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/webhook/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",\n        \"discover_by\": \"url\",\n    }\n    \n    web_system_params = {\n        \"dataset_id\": config.dataset_id if config else \"MISSING\",\n        \"endpoint\": f\"{base_url}/api/brightdata/webhook/\",\n        \"auth_header\": f\"Bearer {webhook_token}\",\n        \"notify\": f\"{base_url}/api/brightdata/notify/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",\n        \"discover_by\": \"url\",\n    }\n    \n    print(\"KEY DIFFERENCES:\")\n    print(\"-\" * 30)\n    \n    # Compare parameters\n    for key in set(list(working_params.keys()) + list(web_system_params.keys())):\n        working_val = working_params.get(key, \"MISSING\")\n        web_sys_val = web_system_params.get(key, \"MISSING\")\n        \n        if working_val != web_sys_val:\n            print(f\"‚ùó {key}:\")\n            print(f\"   Working: {working_val}\")\n            print(f\"   Web Sys: {web_sys_val}\")\n        else:\n            print(f\"‚úÖ {key}: {working_val}\")\n    \n    # Check API tokens\n    working_token = \"c20a28d5-5c6c-43c3-9567-a6d7c193e727\"\n    web_sys_token = config.api_token if config else \"MISSING\"\n    \n    print(f\"\\nAPI TOKENS:\")\n    print(f\"Working: {working_token}\")\n    print(f\"Web Sys: {web_sys_token}\")\n    if working_token != web_sys_token:\n        print(\"‚ùó API tokens are different!\")\n    else:\n        print(\"‚úÖ API tokens match\")\n\nif __name__ == \"__main__\":\n    print(\"üîç BRIGHTDATA API COMPARISON ANALYSIS\")\n    print(\"=\" * 60)\n    \n    # Run comparison first\n    compare_api_calls()\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üß™ TESTING BOTH API CALLS\")\n    print(\"=\" * 60)\n    \n    # Test working version\n    working_response = working_independent_api_call()\n    \n    # Test web system version\n    web_system_response = web_system_api_call()\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üìã SUMMARY\")\n    print(\"=\" * 60)\n    \n    if working_response and web_system_response:\n        if working_response.status_code == web_system_response.status_code == 200:\n            print(\"‚úÖ Both API calls successful!\")\n        elif working_response.status_code == 200:\n            print(\"‚ùó Working API call succeeded, web system failed\")\n            print(f\"   Web system error: {web_system_response.status_code} - {web_system_response.text}\")\n        else:\n            print(\"‚ùå Both API calls failed\")\n    else:\n        print(\"‚ùå Could not complete comparison\")\n
