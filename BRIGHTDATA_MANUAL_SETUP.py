#!/usr/bin/env python3
"""
BRIGHTDATA PRODUCTION SETUP - MANUAL COMMANDS
=============================================
Complete manual setup commands for BrightData production deployment.
Run these when you can access the production server.
"""

def print_manual_setup_commands():
    """Print all manual setup commands for production deployment"""
    
    print("üéØ BRIGHTDATA PRODUCTION SETUP - MANUAL COMMANDS")
    print("=" * 70)
    
    print("\nüìã STEP 1: CONNECT TO PRODUCTION")
    print("-" * 40)
    print("# Use your preferred SSH method:")
    print("upsun ssh -p inhoolfrqniuu -e main --app trackfutura")
    print("# OR")
    print("platform ssh -p inhoolfrqniuu -e main --app trackfutura")
    
    print("\nüìã STEP 2: CREATE BRIGHTDATA CONFIGURATIONS")
    print("-" * 40)
    print("# Navigate to backend directory")
    print("cd backend")
    print()
    print("# Create BrightData configurations using Python")
    print('python -c "')
    print("import os, django")
    print("os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')")
    print("django.setup()")
    print()
    print("from brightdata_integration.models import BrightDataConfig")
    print("from users.models import Platform, Service, PlatformService, Project")
    print()
    print("# Create Instagram configuration")
    print("config, created = BrightDataConfig.objects.get_or_create(")
    print("    platform='instagram',")
    print("    defaults={")
    print("        'name': 'Instagram Posts Scraper',")
    print("        'dataset_id': 'gd_lk5ns7kz21pck8jpis',")
    print("        'api_token': '8af6995e-3baa-4b69-9df7-8d7671e621eb',")
    print("        'is_active': True")
    print("    }")
    print(")")
    print("print(f'Instagram: {\"Created\" if created else \"Updated\"} (ID: {config.id})')")
    print()
    print("# Create Facebook configuration")
    print("config, created = BrightDataConfig.objects.get_or_create(")
    print("    platform='facebook',")
    print("    defaults={")
    print("        'name': 'Facebook Posts Scraper',")
    print("        'dataset_id': 'gd_lkaxegm826bjpoo9m5',")
    print("        'api_token': '8af6995e-3baa-4b69-9df7-8d7671e621eb',")
    print("        'is_active': True")
    print("    }")
    print(")")
    print("print(f'Facebook: {\"Created\" if created else \"Updated\"} (ID: {config.id})')")
    print()
    print("# Verify configurations")
    print("print(f'Total BrightData configs: {BrightDataConfig.objects.count()}')")
    print('print("‚úÖ BrightData configurations created successfully!")')
    print('"')
    
    print("\nüìã STEP 3: CREATE TEST USER FOR AUTHENTICATION")
    print("-" * 40)
    print("# Create test user")
    print('python -c "')
    print("import os, django")
    print("os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')")
    print("django.setup()")
    print()
    print("from django.contrib.auth.models import User")
    print("from rest_framework.authtoken.models import Token")
    print()
    print("# Create test user")
    print("user, created = User.objects.get_or_create(")
    print("    username='test',")
    print("    defaults={")
    print("        'email': 'test@trackfutura.com',")
    print("        'first_name': 'Test',")
    print("        'last_name': 'User'")
    print("    }")
    print(")")
    print()
    print("if created:")
    print("    user.set_password('test123')")
    print("    user.save()")
    print("    print(f'Created user: {user.username}')")
    print("else:")
    print("    print(f'User already exists: {user.username}')")
    print()
    print("# Create auth token")
    print("token, created = Token.objects.get_or_create(user=user)")
    print("print(f'Auth token: {token.key}')")
    print('print("‚úÖ Test user created successfully!")')
    print('"')
    
    print("\nüìã STEP 4: TEST THE DEPLOYMENT")
    print("-" * 40)
    print("# Test scraper trigger endpoint")
    print("curl -X POST https://main-bvxea6i-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/trigger-scraper/ \\")
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"platform": "instagram", "urls": ["https://www.instagram.com/nike/"]}\'')
    print()
    print("# Expected successful response:")
    print('{')
    print('  "success": true,')
    print('  "message": "BrightData instagram scraper triggered successfully!",')
    print('  "platform": "instagram",')
    print('  "urls_count": 1,')
    print('  "dataset_id": "gd_lk5ns7kz21pck8jpis"')
    print('}')
    
    print("\nüìã STEP 5: TEST WITH AUTHENTICATION")
    print("-" * 40)
    print("# Get authentication token")
    print("TOKEN=$(curl -s -X POST https://main-bvxea6i-inhoolfrqniuu.eu-5.platformsh.site/api/users/login/ \\")
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"username": "test", "password": "test123"}\' | jq -r \'.access\')')
    print()
    print("# Test authenticated API access")
    print("curl -X GET https://main-bvxea6i-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/configs/ \\")
    print('  -H "Authorization: Bearer $TOKEN"')
    
    print("\nüéâ SUCCESS INDICATORS")
    print("-" * 40)
    print("‚úÖ BrightData configurations created in database")
    print("‚úÖ Test user created with authentication token")
    print("‚úÖ Scraper trigger endpoint returns success response")
    print("‚úÖ API endpoints accessible with authentication")
    print("‚úÖ BrightData dashboard shows active scraping jobs")
    
    print("\nüîç TROUBLESHOOTING")
    print("-" * 40)
    print("If you encounter issues:")
    print("1. Check Django logs: upsun log -p inhoolfrqniuu -e main --app trackfutura")
    print("2. Verify database connection: python manage.py check")
    print("3. Test local setup first: python fix_brightdata_local.py")
    print("4. Check BrightData dashboard for job status")
    
    print("\nüìù WHAT'S ALREADY DONE")
    print("-" * 40)
    print("‚úÖ Local BrightData integration working")
    print("‚úÖ Service classes properly configured")
    print("‚úÖ URL routing fixed for production")
    print("‚úÖ Working API credentials confirmed")
    print("‚úÖ Webhook endpoints ready")
    print("‚úÖ Code deployed to production")
    
    print("\nüöÄ YOUR BRIGHTDATA INTEGRATION IS 95% COMPLETE!")
    print("Just run the commands above to finish the deployment. üéØ")

if __name__ == "__main__":
    print_manual_setup_commands()