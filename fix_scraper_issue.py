#!/usr/bin/env python3\n\"\"\"\nFix script for BrightData scraper issues on Upsun deployment\n\nKEY ISSUES IDENTIFIED:\n1. BRIGHTDATA_BASE_URL uses localhost instead of Upsun URL\n2. Extra auth_header parameter that working version doesn't use\n3. Extra notify parameter that working version doesn't use  \n4. Dataset ID and API token might be different in database\n\"\"\"\n\nimport os\nimport sys\n\n# Add Django project to path\nbackend_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend')\nsys.path.insert(0, backend_dir)\n\n# Set up Django environment\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\nimport django\ndjango.setup()\n\nfrom brightdata_integration.models import BrightdataConfig\nfrom django.conf import settings\n\ndef diagnose_and_fix():\n    print(\"üîß DIAGNOSING AND FIXING BRIGHTDATA SCRAPER ISSUES\")\n    print(\"=\" * 60)\n    \n    # Issue 1: Check BRIGHTDATA_BASE_URL setting\n    print(\"\\n1. CHECKING BRIGHTDATA_BASE_URL SETTING:\")\n    print(\"-\" * 40)\n    \n    base_url = getattr(settings, 'BRIGHTDATA_BASE_URL', 'http://localhost:8000')\n    webhook_token = getattr(settings, 'BRIGHTDATA_WEBHOOK_TOKEN', 'your-webhook-secret-token')\n    \n    print(f\"Current BRIGHTDATA_BASE_URL: {base_url}\")\n    print(f\"Current BRIGHTDATA_WEBHOOK_TOKEN: {webhook_token}\")\n    \n    correct_url = \"https://api.upsun-deployment-xiwfmii-inhoolfrqniuu.eu-5.platformsh.site\"\n    \n    if base_url != correct_url:\n        print(f\"‚ùå ISSUE: Base URL should be {correct_url}\")\n        print(f\"   Currently: {base_url}\")\n    else:\n        print(\"‚úÖ Base URL is correct\")\n    \n    # Issue 2: Check BrightdataConfig in database\n    print(\"\\n2. CHECKING BRIGHTDATA CONFIG IN DATABASE:\")\n    print(\"-\" * 45)\n    \n    config = BrightdataConfig.objects.filter(platform='instagram_posts', is_active=True).first()\n    \n    if not config:\n        print(\"‚ùå No active Instagram posts configuration found!\")\n        print(\"   Creating new configuration...\")\n        \n        config = BrightdataConfig.objects.create(\n            name=\"Instagram Posts - Fixed\",\n            platform=\"instagram_posts\",\n            dataset_id=\"gd_lk5ns7kz21pck8jpis\",\n            api_token=\"c20a28d5-5c6c-43c3-9567-a6d7c193e727\",\n            is_active=True\n        )\n        print(f\"‚úÖ Created new configuration: {config.name}\")\n    else:\n        print(f\"Found configuration: {config.name}\")\n        print(f\"Dataset ID: {config.dataset_id}\")\n        print(f\"API Token: {config.api_token[:20]}...\")\n        \n        # Check if values match working version\n        working_dataset_id = \"gd_lk5ns7kz21pck8jpis\"\n        working_api_token = \"c20a28d5-5c6c-43c3-9567-a6d7c193e727\"\n        \n        needs_update = False\n        \n        if config.dataset_id != working_dataset_id:\n            print(f\"‚ùå Dataset ID mismatch: {config.dataset_id} != {working_dataset_id}\")\n            config.dataset_id = working_dataset_id\n            needs_update = True\n        else:\n            print(\"‚úÖ Dataset ID matches\")\n            \n        if config.api_token != working_api_token:\n            print(f\"‚ùå API Token mismatch\")\n            config.api_token = working_api_token\n            needs_update = True\n        else:\n            print(\"‚úÖ API Token matches\")\n            \n        if needs_update:\n            config.save()\n            print(\"‚úÖ Updated configuration\")\n    \n    # Issue 3: Check web system API call differences\n    print(\"\\n3. ANALYZING API CALL DIFFERENCES:\")\n    print(\"-\" * 38)\n    \n    print(\"Working independent code uses:\")\n    working_params = {\n        \"dataset_id\": \"gd_lk5ns7kz21pck8jpis\",\n        \"endpoint\": \"https://api.upsun-deployment-xiwfmii-inhoolfrqniuu.eu-5.platformsh.site/api/brightdata/webhook/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",\n        \"discover_by\": \"url\",\n    }\n    \n    print(\"Web system likely uses:\")\n    web_system_params = {\n        \"dataset_id\": config.dataset_id,\n        \"endpoint\": f\"{base_url}/api/brightdata/webhook/\",\n        \"auth_header\": f\"Bearer {webhook_token}\",\n        \"notify\": f\"{base_url}/api/brightdata/notify/\",\n        \"format\": \"json\",\n        \"uncompressed_webhook\": \"true\",\n        \"include_errors\": \"true\",\n        \"type\": \"discover_new\",\n        \"discover_by\": \"url\",\n    }\n    \n    print(\"\\nDifferences found:\")\n    for key in set(list(working_params.keys()) + list(web_system_params.keys())):\n        working_val = working_params.get(key, \"MISSING\")\n        web_sys_val = web_system_params.get(key, \"MISSING\")\n        \n        if working_val != web_sys_val:\n            print(f\"‚ùó {key}:\")\n            print(f\"   Working: {working_val}\")\n            print(f\"   Web Sys: {web_sys_val}\")\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üéØ FIXES TO IMPLEMENT:\")\n    print(\"=\" * 60)\n    \n    print(\"1. Update BRIGHTDATA_BASE_URL in production settings\")\n    print(\"2. Remove auth_header parameter from web system API calls\")\n    print(\"3. Remove notify parameter from web system API calls\")\n    print(\"4. Database configuration has been updated\")\n    \n    return config\n\nif __name__ == \"__main__\":\n    config = diagnose_and_fix()\n    print(f\"\\n‚úÖ Diagnosis complete. Active config: {config.name if config else 'None'}\")\n
